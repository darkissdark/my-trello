{"version":3,"file":"static/js/193.c0594dfe.chunk.js","mappings":"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","sources":["pages/Board/components/Card/CardDetails.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { ICard } from '../../../../common/interfaces/ICard';\nimport api from '../../../../api/request';\nimport './cardDetails.scss';\nimport { IList, IUser } from '../../../../common/interfaces/IList';\nimport iziToast from 'izitoast';\nimport { closeModal, openModal } from '../../../../store/slices/modalSlice';\n\ninterface CardDetailsProps {\n  card: ICard;\n  boardId: string;\n  onCardUpdated: () => void;\n  currentUserId: number;\n}\n\nexport function CardDetails({ card, boardId, onCardUpdated, currentUserId }: CardDetailsProps) {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState(card.title);\n  const [description, setDescription] = useState(card.description || '');\n  const [cardUsers, setCardUsers] = useState<IUser[]>([]);\n  const [isEditingTitle, setIsEditingTitle] = useState(false);\n  const [isEditingDescription, setIsEditingDescription] = useState(false);\n  const [showMoveCardDropdown, setShowMoveCardDropdown] = useState(false);\n  const [lists, setLists] = useState<IList[]>([]);\n\n  const modalRef = useRef<HTMLDivElement>(null);\n  const titleInputRef = useRef<HTMLInputElement>(null);\n  const descriptionRef = useRef<HTMLTextAreaElement>(null);\n\n  const adjustTextareaHeight = (element: HTMLTextAreaElement) => {\n    element.style.height = 'auto';\n    element.style.height = `${element.scrollHeight}px`;\n  };\n\n  useEffect(() => {\n    if (descriptionRef.current) {\n      adjustTextareaHeight(descriptionRef.current);\n    }\n  }, [description]);\n\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        if (isEditingTitle) {\n          setTitle(card.title);\n          setIsEditingTitle(false);\n          titleInputRef.current?.blur();\n        }\n\n        if (isEditingDescription) {\n          setDescription(card.description || '');\n          setIsEditingDescription(false);\n          descriptionRef.current?.blur();\n        }\n\n        if (showMoveCardDropdown) {\n          setShowMoveCardDropdown(false);\n        }\n\n        if (!isEditingTitle && !isEditingDescription && !showMoveCardDropdown) {\n          dispatch(closeModal());\n          navigate(`/board/${boardId}`);\n        }\n      }\n    };\n\n    const handleClickOutside = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        dispatch(closeModal());\n        navigate(`/board/${boardId}`);\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [\n    boardId,\n    navigate,\n    isEditingTitle,\n    isEditingDescription,\n    showMoveCardDropdown,\n    card.title,\n    card.description,\n    dispatch,\n  ]);\n\n  useEffect(() => {\n    const fetchLists = async () => {\n      try {\n        const response = await api.get(`/board/${boardId}`);\n        setLists(response.data.lists || []);\n      } catch (error) {\n        console.error('Error fetching lists:', error);\n      }\n    };\n\n    const fetchUsers = async () => {\n      if (card.users && card.users.length > 0) {\n        try {\n          const usersData = await Promise.all(card.users.map((userId) => api.get(`/board/${boardId}/user/${userId}`)));\n          setCardUsers(usersData.map((res) => res.data));\n        } catch (error) {\n          console.error('Error fetching card users:', error);\n        }\n      }\n    };\n\n    fetchLists();\n    fetchUsers();\n  }, [boardId, card.users]);\n\n  const handleTitleUpdate = async () => {\n    if (title.trim() === card.title) {\n      setIsEditingTitle(false);\n      return;\n    }\n\n    if (title.trim() === '') {\n      setTitle(card.title);\n      setIsEditingTitle(false);\n      return;\n    }\n\n    try {\n      const response = await api.put(`/board/${boardId}/card/${card.id}`, {\n        title: title.trim(),\n        description: card.description || '',\n        list_id: card.list_id,\n      });\n\n      if (response.data.result === 'Updated') {\n        onCardUpdated();\n        setIsEditingTitle(false);\n      }\n    } catch (error) {\n      console.error('Error updating card title:', error);\n      setTitle(card.title);\n    }\n  };\n\n  const handleDescriptionUpdate = async () => {\n    if (description.trim() === card.description) {\n      setIsEditingDescription(false);\n      return;\n    }\n\n    try {\n      const response = await api.put(`/board/${boardId}/card/${card.id}`, {\n        title: card.title,\n        description: description.trim(),\n        list_id: card.list_id,\n      });\n\n      if (response.data.result === 'Updated') {\n        onCardUpdated();\n        setIsEditingDescription(false);\n      }\n    } catch (error) {\n      console.error('Error updating card description:', error);\n      setDescription(card.description || '');\n    }\n  };\n\n  const handleJoinCard = async () => {\n    if (cardUsers.some((user) => user.id === currentUserId)) return;\n\n    try {\n      const response = await api.put(`/board/${boardId}/card/${card.id}/users`, {\n        add: [currentUserId],\n      });\n\n      if (response.data.result === 'Updated') {\n        const userResponse = await api.get(`/board/${boardId}/user/${currentUserId}`);\n        setCardUsers([...cardUsers, userResponse.data]);\n        onCardUpdated();\n      }\n    } catch (error) {\n      console.error('Error joining card:', error);\n    }\n  };\n\n  const handleCopyCard = async () => {\n    try {\n      const response = await api.post(`/board/${boardId}/card`, {\n        title: `${card.title} (Copy)`,\n        list_id: card.list_id,\n        position: card.position + 1,\n        description: card.description,\n        custom: card.custom,\n      });\n\n      if (response.data.result === 'Created') {\n        onCardUpdated();\n        navigate(`/board/${boardId}`);\n        iziToast.success({\n          title: 'Картку скопійовано',\n          position: 'topRight',\n        });\n      }\n    } catch (error) {\n      console.error('Error copying card:', error);\n    }\n  };\n\n  const handleArchiveCard = async () => {\n    try {\n      const response = await api.delete(`/board/${boardId}/card/${card.id}`);\n\n      if (response.data.result === 'Deleted') {\n        onCardUpdated();\n        navigate(`/board/${boardId}`);\n        iziToast.success({\n          title: 'Картку архівовано',\n          position: 'topRight',\n        });\n      }\n    } catch (error) {\n      console.error('Error archiving card:', error);\n    }\n  };\n\n  const handleMoveCard = async (newListId: number) => {\n    try {\n      const response = await api.put(`/board/${boardId}/card`, [\n        {\n          id: card.id,\n          list_id: newListId,\n          position: lists.find((l) => l.id === newListId)?.cards.length || 0,\n        },\n      ]);\n\n      if (response.data.result === 'Updated') {\n        onCardUpdated();\n        dispatch(openModal({ ...card, list_id: newListId }));\n        // navigate(`/board/${boardId}/card/${card.id}`);\n        iziToast.success({\n          title: 'Картку переміщено',\n          position: 'topRight',\n        });\n      }\n    } catch (error) {\n      console.error('Error moving card:', error);\n    }\n    setShowMoveCardDropdown(false);\n  };\n\n  return (\n    <div className=\"card-details-overlay\">\n      <div className=\"card-details-modal\" ref={modalRef}>\n        <button\n          className=\"card-details-close\"\n          onClick={() => {\n            dispatch(closeModal());\n            navigate(`/board/${boardId}`);\n          }}\n        >\n          ×\n        </button>\n\n        <div className=\"card-details-content\">\n          <input\n            ref={titleInputRef}\n            type=\"text\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            onBlur={handleTitleUpdate}\n            onFocus={() => setIsEditingTitle(true)}\n            onKeyDown={(e) => e.key === 'Enter' && handleTitleUpdate()}\n          />\n          <div>В колонці: {lists.find((list) => list.id === card.list_id)?.title}</div>\n\n          <div className=\"card-details-participants\">\n            <h3>Учасники</h3>\n            <div className=\"card-details-participant-list\">\n              {cardUsers.map((user) => (\n                <div key={user.id} className=\"card-details-participant-avatar\">\n                  {user.username.charAt(0).toUpperCase()}\n                </div>\n              ))}\n              <button className=\"card-details-join-button\" onClick={handleJoinCard}>\n                Приєднатися\n              </button>\n            </div>\n          </div>\n\n          <div className=\"card-details-description\">\n            <h3>Опис</h3>\n            <textarea\n              ref={descriptionRef}\n              value={description}\n              onFocus={() => setIsEditingDescription(true)}\n              onChange={(e) => {\n                setDescription(e.target.value);\n                adjustTextareaHeight(e.target);\n              }}\n              onBlur={handleDescriptionUpdate}\n              placeholder=\"Додайте докладніший опис...\"\n            />\n          </div>\n        </div>\n\n        <div className=\"card-details-actions\">\n          <h3>Дії</h3>\n          <button onClick={handleCopyCard} className=\"card-details-action-button\">\n            Копіювати\n          </button>\n          <div className=\"card-details-move-button-wrapper\">\n            <button\n              onClick={() => setShowMoveCardDropdown(!showMoveCardDropdown)}\n              className=\"card-details-action-button\"\n            >\n              Переміщення\n            </button>\n            {showMoveCardDropdown && (\n              <div className=\"card-details-move-dropdown\">\n                {lists.map((list) => (\n                  <button key={list.id} onClick={() => handleMoveCard(list.id)}>\n                    {list.title}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n          <button\n            className=\"card-details-action-button card-details-action-button--archive\"\n            onClick={handleArchiveCard}\n          >\n            Архівувати\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["CardDetails","_ref","_lists$find2","card","boardId","onCardUpdated","currentUserId","navigate","useNavigate","dispatch","useDispatch","title","setTitle","useState","description","setDescription","cardUsers","setCardUsers","isEditingTitle","setIsEditingTitle","isEditingDescription","setIsEditingDescription","showMoveCardDropdown","setShowMoveCardDropdown","lists","setLists","modalRef","useRef","titleInputRef","descriptionRef","adjustTextareaHeight","element","style","height","concat","scrollHeight","useEffect","current","handleEscape","e","key","_titleInputRef$curren","_descriptionRef$curre","blur","closeModal","handleClickOutside","contains","target","document","addEventListener","removeEventListener","async","response","api","get","data","error","console","fetchLists","users","length","usersData","Promise","all","map","userId","res","fetchUsers","handleTitleUpdate","trim","put","id","list_id","result","_jsx","className","children","_jsxs","ref","onClick","type","value","onChange","onBlur","onFocus","onKeyDown","find","list","user","username","charAt","toUpperCase","some","add","userResponse","placeholder","post","position","custom","iziToast","_lists$find","newListId","l","cards","openModal","_objectSpread","handleMoveCard","delete"],"sourceRoot":""}