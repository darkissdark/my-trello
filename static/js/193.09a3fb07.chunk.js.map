{"version":3,"file":"static/js/193.09a3fb07.chunk.js","mappings":"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","sources":["pages/Board/components/Card/CardDetails.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { ICard } from '../../../../common/interfaces/ICard';\nimport api from '../../../../api/request';\nimport './cardDetails.scss';\nimport { IList, IUser } from '../../../../common/interfaces/IList';\nimport iziToast from 'izitoast';\nimport { closeModal, openModal } from '../../../../store/slices/modalSlice';\nimport { BoardNameInput } from '../common/BoardNameInput';\n\ninterface CardDetailsProps {\n  card: ICard;\n  boardId: string;\n  onCardUpdated: () => void;\n  currentUserId: number;\n}\n\nexport function CardDetails({ card, boardId, onCardUpdated, currentUserId }: CardDetailsProps) {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState(card.title);\n  const [description, setDescription] = useState(card.description || '');\n  const [cardUsers, setCardUsers] = useState<IUser[]>([]);\n  const [isEditingTitle, setIsEditingTitle] = useState(false);\n  const [isEditingDescription, setIsEditingDescription] = useState(false);\n  const [showMoveCardDropdown, setShowMoveCardDropdown] = useState(false);\n  const [lists, setLists] = useState<IList[]>([]);\n\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        if (isEditingTitle) {\n          setTitle(card.title);\n          setIsEditingTitle(false);\n        }\n\n        if (isEditingDescription) {\n          setDescription(card.description || '');\n          setIsEditingDescription(false);\n        }\n\n        if (showMoveCardDropdown) {\n          setShowMoveCardDropdown(false);\n        }\n\n        if (!isEditingTitle && !isEditingDescription && !showMoveCardDropdown) {\n          dispatch(closeModal());\n          navigate(`/board/${boardId}`);\n        }\n      }\n    };\n\n    const handleClickOutside = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        dispatch(closeModal());\n        navigate(`/board/${boardId}`);\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [\n    boardId,\n    navigate,\n    isEditingTitle,\n    isEditingDescription,\n    showMoveCardDropdown,\n    card.title,\n    card.description,\n    dispatch,\n  ]);\n\n  useEffect(() => {\n    const fetchLists = async () => {\n      try {\n        const response = await api.get(`/board/${boardId}`);\n        setLists(response.data.lists || []);\n      } catch (error) {\n        console.error('Error fetching lists:', error);\n      }\n    };\n\n    const fetchUsers = async () => {\n      if (card.users && card.users.length > 0) {\n        try {\n          const usersData = await Promise.all(card.users.map((userId) => api.get(`/board/${boardId}/user/${userId}`)));\n          setCardUsers(usersData.map((res) => res.data));\n        } catch (error) {\n          console.error('Error fetching card users:', error);\n        }\n      }\n    };\n\n    fetchLists();\n    fetchUsers();\n  }, [boardId, card.users]);\n\n  const handleTitleUpdate = async () => {\n    if (title.trim() === card.title) {\n      setIsEditingTitle(false);\n      return;\n    }\n\n    if (title.trim() === '') {\n      setTitle(card.title);\n      setIsEditingTitle(false);\n      return;\n    }\n\n    try {\n      const response = await api.put(`/board/${boardId}/card/${card.id}`, {\n        title: title.trim(),\n        description: card.description || '',\n        list_id: card.list_id,\n      });\n\n      if (response.data.result === 'Updated') {\n        onCardUpdated();\n        setIsEditingTitle(false);\n      }\n    } catch (error) {\n      console.error('Error updating card title:', error);\n      setTitle(card.title);\n    }\n  };\n\n  const handleDescriptionUpdate = async () => {\n    if (description.trim() === card.description) {\n      setIsEditingDescription(false);\n      return;\n    }\n\n    try {\n      const response = await api.put(`/board/${boardId}/card/${card.id}`, {\n        title: card.title,\n        description: description.trim(),\n        list_id: card.list_id,\n      });\n\n      if (response.data.result === 'Updated') {\n        onCardUpdated();\n        setIsEditingDescription(false);\n      }\n    } catch (error) {\n      console.error('Error updating card description:', error);\n      setDescription(card.description || '');\n    }\n  };\n\n  const handleJoinCard = async () => {\n    if (cardUsers.some((user) => user.id === currentUserId)) return;\n\n    try {\n      const response = await api.put(`/board/${boardId}/card/${card.id}/users`, {\n        add: [currentUserId],\n      });\n\n      if (response.data.result === 'Updated') {\n        const userResponse = await api.get(`/board/${boardId}/user/${currentUserId}`);\n        setCardUsers([...cardUsers, userResponse.data]);\n        onCardUpdated();\n      }\n    } catch (error) {\n      console.error('Error joining card:', error);\n    }\n  };\n\n  const handleCopyCard = async () => {\n    try {\n      const response = await api.post(`/board/${boardId}/card`, {\n        title: `${card.title} (Copy)`,\n        list_id: card.list_id,\n        position: card.position + 1,\n        description: card.description,\n        custom: card.custom,\n      });\n\n      if (response.data.result === 'Created') {\n        onCardUpdated();\n        navigate(`/board/${boardId}`);\n        iziToast.success({\n          title: 'Картку скопійовано',\n          position: 'topRight',\n        });\n      }\n    } catch (error) {\n      console.error('Error copying card:', error);\n    }\n  };\n\n  const handleArchiveCard = async () => {\n    try {\n      const response = await api.delete(`/board/${boardId}/card/${card.id}`);\n\n      if (response.data.result === 'Deleted') {\n        onCardUpdated();\n        navigate(`/board/${boardId}`);\n        iziToast.success({\n          title: 'Картку архівовано',\n          position: 'topRight',\n        });\n      }\n    } catch (error) {\n      console.error('Error archiving card:', error);\n    }\n  };\n\n  const handleMoveCard = async (newListId: number) => {\n    try {\n      const response = await api.put(`/board/${boardId}/card`, [\n        {\n          id: card.id,\n          list_id: newListId,\n          position: lists.find((l) => l.id === newListId)?.cards.length || 0,\n        },\n      ]);\n\n      if (response.data.result === 'Updated') {\n        onCardUpdated();\n        dispatch(openModal({ ...card, list_id: newListId }));\n        iziToast.success({\n          title: 'Картку переміщено',\n          position: 'topRight',\n        });\n      }\n    } catch (error) {\n      console.error('Error moving card:', error);\n    }\n    setShowMoveCardDropdown(false);\n  };\n\n  const handleClose = () => {\n    navigate(`/board/${boardId}`);\n    dispatch(closeModal());\n  };\n\n  return (\n    <div className=\"card-details-overlay\">\n      <div className=\"card-details-modal\" ref={modalRef}>\n        <button className=\"card-details-close\" onClick={handleClose}>\n          ×\n        </button>\n\n        <div className=\"card-details-content\">\n          <div className=\"card-details-title\">\n            <BoardNameInput\n              as=\"textarea\"\n              value={title}\n              onChange={setTitle}\n              onBlur={handleTitleUpdate}\n              onSubmit={handleTitleUpdate}\n              placeholder=\"Назва картки\"\n              autoFocus={false}\n            />\n          </div>\n          <div className=\"card-details-scroll-wrapper\">\n            <div className=\"break-word\">В колонці: {lists.find((list) => list.id === card.list_id)?.title}</div>\n            <div className=\"card-details-participants\">\n              <h3>Учасники</h3>\n              <div className=\"card-details-participant-list\">\n                {cardUsers.map((user) => (\n                  <div key={user.id} className=\"card-details-participant-avatar\">\n                    {user.username.charAt(0).toUpperCase()}\n                  </div>\n                ))}\n                <button className=\"card-details-join-button\" onClick={handleJoinCard}>\n                  Приєднатися\n                </button>\n              </div>\n            </div>\n            <div className=\"card-details-description\">\n              <h3>Опис</h3>\n              <BoardNameInput\n                value={description}\n                onChange={setDescription}\n                onBlur={handleDescriptionUpdate}\n                placeholder=\"Додайте докладніший опис...\"\n                as=\"textarea\"\n                disableValidation={true}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"card-details-actions\">\n          <h3>Дії</h3>\n          <button onClick={handleCopyCard} className=\"card-details-action-button\">\n            Копіювати\n          </button>\n          <div className=\"card-details-move-button-wrapper\">\n            {lists.filter((list) => list.id !== card.list_id).length > 0 && (\n              <button\n                onClick={() => setShowMoveCardDropdown(!showMoveCardDropdown)}\n                className=\"card-details-action-button\"\n              >\n                Переміщення\n              </button>\n            )}\n            {showMoveCardDropdown && (\n              <div className=\"card-details-move-dropdown\">\n                {lists\n                  .filter((list) => list.id !== card.list_id)\n                  .map((list) => (\n                    <button key={list.id} onClick={() => handleMoveCard(list.id)}>\n                      {list.title}\n                    </button>\n                  ))}\n              </div>\n            )}\n          </div>\n          <button\n            className=\"card-details-action-button card-details-action-button--archive\"\n            onClick={handleArchiveCard}\n          >\n            Архівувати\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["CardDetails","_ref","_lists$find2","card","boardId","onCardUpdated","currentUserId","navigate","useNavigate","dispatch","useDispatch","title","setTitle","useState","description","setDescription","cardUsers","setCardUsers","isEditingTitle","setIsEditingTitle","isEditingDescription","setIsEditingDescription","showMoveCardDropdown","setShowMoveCardDropdown","lists","setLists","modalRef","useRef","useEffect","handleEscape","e","key","closeModal","concat","handleClickOutside","current","contains","target","document","addEventListener","removeEventListener","async","response","api","get","data","error","console","fetchLists","users","length","usersData","Promise","all","map","userId","res","fetchUsers","handleTitleUpdate","trim","put","id","list_id","result","_jsx","className","children","_jsxs","ref","onClick","handleClose","BoardNameInput","as","value","onChange","onBlur","onSubmit","placeholder","autoFocus","find","list","user","username","charAt","toUpperCase","some","add","userResponse","disableValidation","post","position","custom","iziToast","filter","_lists$find","newListId","l","cards","openModal","_objectSpread","handleMoveCard","delete"],"sourceRoot":""}