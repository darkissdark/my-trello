{"version":3,"file":"static/js/193.7cc5c276.chunk.js","mappings":"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","sources":["pages/Board/components/Card/CardDetails.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { ICard } from '../../../../common/interfaces/ICard';\nimport api from '../../../../api/request';\nimport './cardDetails.scss';\nimport { IList } from '../../../../common/interfaces/IList';\nimport { IUser } from '../../../../common/interfaces/IUser';\nimport iziToast from 'izitoast';\nimport { closeModal, openModal } from '../../../../store/slices/modalSlice';\nimport { BoardNameInput } from '../common/BoardNameInput';\n\ninterface CardDetailsProps {\n  card: ICard;\n  boardId: string;\n  onCardUpdated: () => void;\n  currentUser: IUser | null;\n}\n\nexport function CardDetails({ card, boardId, onCardUpdated, currentUser }: CardDetailsProps) {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState(card.title);\n  const [description, setDescription] = useState(card.description || '');\n  const [cardUsers, setCardUsers] = useState<IUser[]>([]);\n  const [isEditingTitle, setIsEditingTitle] = useState(false);\n  const [isEditingDescription, setIsEditingDescription] = useState(false);\n  const [showMoveCardDropdown, setShowMoveCardDropdown] = useState(false);\n  const [lists, setLists] = useState<IList[]>([]);\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  const currentUserId = currentUser?.id;\n\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        if (isEditingTitle) {\n          setTitle(card.title);\n          setIsEditingTitle(false);\n        }\n\n        if (isEditingDescription) {\n          setDescription(card.description || '');\n          setIsEditingDescription(false);\n        }\n\n        if (showMoveCardDropdown) {\n          setShowMoveCardDropdown(false);\n        }\n\n        if (!isEditingTitle && !isEditingDescription && !showMoveCardDropdown) {\n          dispatch(closeModal());\n          navigate(`/board/${boardId}`);\n        }\n      }\n    };\n\n    const handleClickOutside = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        dispatch(closeModal());\n        navigate(`/board/${boardId}`);\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [\n    boardId,\n    card.title,\n    card.description,\n    dispatch,\n    navigate,\n    isEditingTitle,\n    isEditingDescription,\n    showMoveCardDropdown,\n  ]);\n\n  useEffect(() => {\n    const fetchLists = async () => {\n      try {\n        const response = await api.get(`/board/${boardId}`);\n        setLists(response.data.lists || []);\n      } catch (error) {\n        console.error('Error fetching lists:', error);\n      }\n    };\n\n    const fetchUsers = async () => {\n      if (card.users && card.users.length > 0 && currentUser) {\n        const usersData = card.users.map((userId) => ({\n          id: userId,\n          email: currentUser.email || 'no email',\n          username: currentUser.username || 'no username',\n        }));\n        setCardUsers(usersData);\n      }\n    };\n\n    fetchLists();\n    fetchUsers();\n  }, [boardId, card.users, currentUser]);\n\n  const handleTitleUpdate = async () => {\n    if (title.trim() === card.title || !title.trim()) {\n      setTitle(card.title);\n      setIsEditingTitle(false);\n      return;\n    }\n\n    try {\n      const response = await api.put(`/board/${boardId}/card/${card.id}`, {\n        title: title.trim(),\n        description: card.description || '',\n        list_id: card.list_id,\n      });\n\n      if (response.data.result === 'Updated') {\n        onCardUpdated();\n        setIsEditingTitle(false);\n      }\n    } catch (error) {\n      console.error('Error updating card title:', error);\n      setTitle(card.title);\n    }\n  };\n\n  const handleDescriptionUpdate = async () => {\n    if (description.trim() === card.description) {\n      setIsEditingDescription(false);\n      return;\n    }\n\n    try {\n      const response = await api.put(`/board/${boardId}/card/${card.id}`, {\n        title: card.title,\n        description: description.trim(),\n        list_id: card.list_id,\n      });\n\n      if (response.data.result === 'Updated') {\n        onCardUpdated();\n        setIsEditingDescription(false);\n      }\n    } catch (error) {\n      console.error('Error updating card description:', error);\n      setDescription(card.description || '');\n    }\n  };\n\n  const handleJoinCard = async () => {\n    if (!currentUser || cardUsers.some((user) => user.id === currentUser.id)) return;\n\n    try {\n      const response = await api.put(`/board/${boardId}/card/${card.id}/users`, {\n        add: [currentUser.id],\n        remove: [],\n      });\n\n      if (response.data.result === 'Updated') {\n        setCardUsers([...cardUsers, currentUser]);\n        onCardUpdated();\n      }\n    } catch (error) {\n      console.error('Error joining card:', error);\n    }\n  };\n\n  const handleLeaveCard = async () => {\n    if (!currentUser || !cardUsers.some((user) => user.id === currentUser.id)) return;\n\n    try {\n      const response = await api.put(`/board/${boardId}/card/${card.id}/users`, {\n        add: [],\n        remove: [currentUser.id],\n      });\n\n      if (response.data.result === 'Updated') {\n        setCardUsers(cardUsers.filter((user) => user.id !== currentUser.id));\n        onCardUpdated();\n      }\n    } catch (error) {\n      console.error('Error leaving card:', error);\n    }\n  };\n\n  const handleCopyCard = async () => {\n    console.log('Copying card:', card);\n    try {\n      const response = await api.post(`/board/${boardId}/card`, {\n        title: `${card.title} - Copy`,\n        list_id: card.list_id,\n        position: card.position + 1,\n        description: card.description,\n        custom: card.custom,\n      });\n\n      if (response.data.result === 'Created') {\n        onCardUpdated();\n        navigate(`/board/${boardId}`);\n        iziToast.success({ title: 'Картку скопійовано', position: 'topRight' });\n      }\n    } catch (error) {\n      console.error('Error copying card:', error);\n    }\n  };\n\n  const handleArchiveCard = async () => {\n    try {\n      const response = await api.delete(`/board/${boardId}/card/${card.id}`);\n\n      if (response.data.result === 'Deleted') {\n        onCardUpdated();\n        navigate(`/board/${boardId}`);\n        iziToast.success({ title: 'Картку архівовано', position: 'topRight' });\n      }\n    } catch (error) {\n      console.error('Error archiving card:', error);\n    }\n  };\n\n  const handleMoveCard = async (newListId: number) => {\n    try {\n      const response = await api.put(`/board/${boardId}/card`, [\n        {\n          id: card.id,\n          list_id: newListId,\n          position: lists.find((list) => list.id === newListId)?.cards.length || 0,\n        },\n      ]);\n\n      if (response.data.result === 'Updated') {\n        onCardUpdated();\n        dispatch(openModal({ ...card, list_id: newListId }));\n        iziToast.success({ title: 'Картку переміщено', position: 'topRight' });\n      }\n    } catch (error) {\n      console.error('Error moving card:', error);\n    }\n    setShowMoveCardDropdown(false);\n  };\n\n  const handleClose = () => {\n    dispatch(closeModal());\n    navigate(`/board/${boardId}`);\n  };\n\n  return (\n    <div className=\"card-details-overlay\">\n      <div className=\"card-details-modal\" ref={modalRef}>\n        <button className=\"card-details-close\" onClick={handleClose}>\n          ×\n        </button>\n        <div className=\"mobile-scroll-wrapper\">\n          <div className=\"card-details-content\">\n            <div className=\"card-details-title\">\n              <BoardNameInput\n                as=\"textarea\"\n                value={title}\n                onChange={setTitle}\n                onBlur={handleTitleUpdate}\n                onSubmit={handleTitleUpdate}\n                placeholder=\"Назва картки\"\n                autoFocus={false}\n              />\n            </div>\n            <div className=\"card-details-scroll-wrapper\">\n              <div>\n                В колонці:{' '}\n                {lists.length === 0\n                  ? 'Завантаження...'\n                  : lists.find((list) => list.id === card.list_id)?.title || 'Невідомо'}\n              </div>\n              <div className=\"card-details-participants\">\n                <h3>Учасники</h3>\n                <div className=\"card-details-participant-list\">\n                  {cardUsers.map((user) => (\n                    <div key={user.id} className=\"card-details-participant-avatar\">\n                      {user.username.charAt(0).toUpperCase()}\n                    </div>\n                  ))}\n                  <button\n                    className=\"card-details-join-button\"\n                    onClick={cardUsers.some((user) => user.id === currentUserId) ? handleLeaveCard : handleJoinCard}\n                  >\n                    {cardUsers.some((user) => user.id === currentUserId) ? 'Покинути' : 'Приєднатися'}\n                  </button>\n                </div>\n              </div>\n              <div className=\"card-details-description\">\n                <h3>Опис</h3>\n                <BoardNameInput\n                  value={description}\n                  onChange={setDescription}\n                  onBlur={handleDescriptionUpdate}\n                  placeholder=\"Додайте опис...\"\n                  as=\"textarea\"\n                  disableValidation={true}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"card-details-actions\">\n            <h3>Дії</h3>\n            <button onClick={handleCopyCard} className=\"card-details-action-button\">\n              Копіювати\n            </button>\n            {lists.filter((list) => list.id !== card.list_id).length > 0 && (\n              <div className=\"card-details-move-button-wrapper\">\n                <button\n                  onClick={() => setShowMoveCardDropdown(!showMoveCardDropdown)}\n                  className=\"card-details-action-button\"\n                >\n                  Переміщення\n                </button>\n                {showMoveCardDropdown && (\n                  <div className=\"card-details-move-dropdown\">\n                    {lists\n                      .filter((list) => list.id !== card.list_id)\n                      .map((list) => (\n                        <button key={list.id} onClick={() => handleMoveCard(list.id)}>\n                          {list.title}\n                        </button>\n                      ))}\n                  </div>\n                )}\n              </div>\n            )}\n            <button\n              onClick={handleArchiveCard}\n              className=\"card-details-action-button card-details-action-button--archive\"\n            >\n              Архівувати\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["CardDetails","_ref","_lists$find2","card","boardId","onCardUpdated","currentUser","navigate","useNavigate","dispatch","useDispatch","title","setTitle","useState","description","setDescription","cardUsers","setCardUsers","isEditingTitle","setIsEditingTitle","isEditingDescription","setIsEditingDescription","showMoveCardDropdown","setShowMoveCardDropdown","lists","setLists","modalRef","useRef","currentUserId","id","useEffect","handleEscape","e","key","closeModal","concat","handleClickOutside","current","contains","target","document","addEventListener","removeEventListener","async","response","api","get","data","error","console","fetchLists","users","length","usersData","map","userId","email","username","fetchUsers","handleTitleUpdate","trim","put","list_id","result","_jsx","className","children","_jsxs","ref","onClick","handleClose","BoardNameInput","as","value","onChange","onBlur","onSubmit","placeholder","autoFocus","find","list","user","charAt","toUpperCase","some","add","remove","filter","disableValidation","log","post","position","custom","iziToast","_lists$find","newListId","cards","openModal","_objectSpread","handleMoveCard","delete"],"sourceRoot":""}