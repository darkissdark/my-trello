{"version":3,"file":"static/js/193.f9746af1.chunk.js","mappings":"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","sources":["pages/Board/components/Card/CardDetails.tsx"],"sourcesContent":["import { useState, useEffect, useRef, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { ICard } from '../../../../common/interfaces/ICard';\nimport api from '../../../../api/request';\nimport './cardDetails.scss';\nimport { IList } from '../../../../common/interfaces/IList';\nimport { IUser } from '../../../../common/interfaces/IUser';\nimport iziToast from 'izitoast';\nimport { closeModal, openModal } from '../../../../store/slices/modalSlice';\nimport { BoardNameInput } from '../common/BoardNameInput';\n\ninterface CardDetailsProps {\n  card: ICard;\n  boardId: string;\n  onCardUpdated: () => void;\n  currentUser: IUser | null;\n}\n\nexport function CardDetails({ card, boardId, onCardUpdated, currentUser }: CardDetailsProps) {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  const [title, setTitle] = useState(card.title);\n  const [description, setDescription] = useState(card.description || '');\n  const [cardUsers, setCardUsers] = useState<IUser[]>([]);\n  const [lists, setLists] = useState<IList[]>([]);\n  const [showMoveCardDropdown, setShowMoveCardDropdown] = useState(false);\n\n  const isCurrentUserInCard = cardUsers.some((user) => user.id === currentUser?.id);\n\n  const handleClose = useCallback(() => {\n    dispatch(closeModal());\n    navigate(`/board/${boardId}`);\n  }, [dispatch, navigate, boardId]);\n\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => e.key === 'Escape' && handleClose();\n    const handleClickOutside = (e: MouseEvent) => {\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) {\n        handleClose();\n      }\n    };\n    document.addEventListener('keydown', handleEscape);\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [handleClose]);\n\n  useEffect(() => {\n    const fetchLists = async () => {\n      try {\n        const res = await api.get(`/board/${boardId}`);\n        setLists(res.data.lists || []);\n      } catch (error) {\n        console.error('Error fetching lists:', error);\n      }\n    };\n\n    const fetchUsers = () => {\n      if (card.users?.length && currentUser) {\n        const usersData = card.users.map((id) => ({\n          id,\n          email: currentUser.email || 'no email',\n          username: currentUser.username || 'no username',\n        }));\n        setCardUsers(usersData);\n      }\n    };\n\n    fetchLists();\n    fetchUsers();\n  }, [boardId, card.users, currentUser]);\n\n  const updateCard = async (payload: Partial<ICard>) => {\n    try {\n      const res = await api.put(`/board/${boardId}/card/${card.id}`, {\n        ...card,\n        ...payload,\n      });\n      if (res.data.result === 'Updated') {\n        onCardUpdated();\n      }\n    } catch (error) {\n      console.error('Error updating card:', error);\n    }\n  };\n\n  const handleCopyCard = async () => {\n    try {\n      const res = await api.post(`/board/${boardId}/card`, {\n        ...card,\n        title: `${card.title} - Copy`,\n        position: card.position + 1,\n      });\n      if (res.data.result === 'Created') {\n        onCardUpdated();\n        iziToast.success({ title: 'Картку скопійовано', position: 'topRight' });\n        handleClose();\n      }\n    } catch (error) {\n      console.error('Error copying card:', error);\n    }\n  };\n\n  const handleMoveCard = async (listId: number) => {\n    try {\n      const res = await api.put(`/board/${boardId}/card`, [\n        {\n          id: card.id,\n          list_id: listId,\n          position: lists.find((l) => l.id === listId)?.cards.length || 0,\n        },\n      ]);\n      if (res.data.result === 'Updated') {\n        onCardUpdated();\n        dispatch(openModal({ ...card, list_id: listId }));\n        iziToast.success({ title: 'Картку переміщено', position: 'topRight' });\n      }\n    } catch (error) {\n      console.error('Error moving card:', error);\n    }\n    setShowMoveCardDropdown(false);\n  };\n\n  const handleArchiveCard = async () => {\n    try {\n      const res = await api.delete(`/board/${boardId}/card/${card.id}`);\n      if (res.data.result === 'Deleted') {\n        onCardUpdated();\n        iziToast.success({ title: 'Картку архівовано', position: 'topRight' });\n        handleClose();\n      }\n    } catch (error) {\n      console.error('Error archiving card:', error);\n    }\n  };\n\n  const toggleCardMembership = async () => {\n    if (!currentUser) return;\n    const method = isCurrentUserInCard ? 'remove' : 'add';\n    try {\n      const res = await api.put(`/board/${boardId}/card/${card.id}/users`, {\n        add: method === 'add' ? [currentUser.id] : [],\n        remove: method === 'remove' ? [currentUser.id] : [],\n      });\n      if (res.data.result === 'Updated') {\n        setCardUsers((prev) =>\n          method === 'add' ? [...prev, currentUser] : prev.filter((user) => user.id !== currentUser.id)\n        );\n        onCardUpdated();\n      }\n    } catch (error) {\n      console.error(`Error ${method === 'add' ? 'joining' : 'leaving'} card:`, error);\n    }\n  };\n\n  return (\n    <div className=\"card-details-overlay\">\n      <div className=\"card-details-modal\" ref={modalRef}>\n        <button className=\"card-details-close\" onClick={handleClose}>\n          ×\n        </button>\n        <div className=\"mobile-scroll-wrapper\">\n          <div className=\"card-details-content\">\n            <div className=\"card-details-title\">\n              <BoardNameInput\n                as=\"textarea\"\n                value={title}\n                onChange={setTitle}\n                onBlur={() => updateCard({ title })}\n                onSubmit={() => updateCard({ title })}\n                placeholder=\"Назва картки\"\n              />\n            </div>\n            <div className=\"card-details-scroll-wrapper\">\n              <div>\n                В колонці:{' '}\n                {lists.length ? lists.find((l) => l.id === card.list_id)?.title || 'Невідомо' : 'Завантаження...'}\n              </div>\n              <div className=\"card-details-participants\">\n                <h3>Учасники</h3>\n                <div className=\"card-details-participant-list\">\n                  {cardUsers.map((u) => (\n                    <div key={u.id} className=\"card-details-participant-avatar\">\n                      {u.username[0].toUpperCase()}\n                    </div>\n                  ))}\n                  <button onClick={toggleCardMembership} className=\"card-details-join-button\">\n                    {isCurrentUserInCard ? 'Покинути' : 'Приєднатися'}\n                  </button>\n                </div>\n              </div>\n              <div className=\"card-details-description\">\n                <h3>Опис</h3>\n                <BoardNameInput\n                  value={description}\n                  onChange={setDescription}\n                  onBlur={() => updateCard({ description })}\n                  placeholder=\"Додайте опис...\"\n                  as=\"textarea\"\n                  disableValidation\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"card-details-actions\">\n            <h3>Дії</h3>\n            <button onClick={handleCopyCard} className=\"card-details-action-button\">\n              Копіювати\n            </button>\n            {lists.length > 1 && (\n              <div className=\"card-details-move-button-wrapper\">\n                <button\n                  onClick={() => setShowMoveCardDropdown(!showMoveCardDropdown)}\n                  className=\"card-details-action-button\"\n                >\n                  Переміщення\n                </button>\n                {showMoveCardDropdown && (\n                  <div className=\"card-details-move-dropdown\">\n                    {lists\n                      .filter((l) => l.id !== card.list_id)\n                      .map((l) => (\n                        <button key={l.id} onClick={() => handleMoveCard(l.id)}>\n                          {l.title}\n                        </button>\n                      ))}\n                  </div>\n                )}\n              </div>\n            )}\n            <button\n              onClick={handleArchiveCard}\n              className=\"card-details-action-button card-details-action-button--archive\"\n            >\n              Архівувати\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["CardDetails","_ref","_lists$find2","card","boardId","onCardUpdated","currentUser","dispatch","useDispatch","navigate","useNavigate","modalRef","useRef","title","setTitle","useState","description","setDescription","cardUsers","setCardUsers","lists","setLists","showMoveCardDropdown","setShowMoveCardDropdown","isCurrentUserInCard","some","user","id","handleClose","useCallback","closeModal","concat","useEffect","handleEscape","e","key","handleClickOutside","current","contains","target","document","addEventListener","removeEventListener","async","res","api","get","data","error","console","fetchLists","fetchUsers","_card$users","users","length","usersData","map","email","username","updateCard","put","_objectSpread","payload","result","_jsx","className","children","_jsxs","ref","onClick","BoardNameInput","as","value","onChange","onBlur","onSubmit","placeholder","find","l","list_id","u","toUpperCase","method","add","remove","prev","filter","disableValidation","post","position","iziToast","_lists$find","listId","cards","openModal","handleMoveCard","delete"],"sourceRoot":""}